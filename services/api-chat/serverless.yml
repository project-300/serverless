service: api-chat-service
frameworkVersion: ">=1.44.0"

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  projectName: P300

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  environment:
    tableName: ${file(../api-infrastructure/serverless.yml):custom.generalTableName}
    ENVIRONMENT: ${opt:stage, self:provider.stage}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-P300-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-P300-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '*'

plugins:
  - serverless-offline
  - serverless-webpack

functions:
  getAllChatsByUser:
    handler: src/handler.getAllChatsByUser
    events:
      - http:
          path: /chats
          method: get
          cors: true
          authorizer: aws_iam
  getChatById:
    handler: src/handler.getChatById
    events:
      - http:
          path: /chats/{chatId}/{otherUserId}
          method: get
          cors: true
          authorizer: aws_iam
  chatSubscribe:
    handler: src/handler.chatSubscribe
    events:
      - http:
          path: /chats/subscribe/{otherUserId}/{deviceId}
          method: get
          cors: true
          authorizer: aws_iam
  chatUnsubscribe:
    handler: src/handler.chatUnsubscribe
    events:
      - http:
          path: /chats/unsubscribe/{otherUserId}/{deviceId}
          method: put
          cors: true
          authorizer: aws_iam
  createChat:
    handler: src/handler.createChat
    events:
      - http:
          path: /chats
          method: post
          cors: true
          authorizer: aws_iam
  updateChat:
    handler: src/handler.updateChat
    events:
      - http:
          path: /chats
          method: put
          cors: true
          authorizer: aws_iam
  deleteChat:
    handler: src/handler.deleteChat
    events:
      - http:
          path: /chats/{chatId}/{otherUserId}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
    - ${file(../resources/cognito-policy.yml)}

