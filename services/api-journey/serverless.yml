service: api-journey-service
frameworkVersion: ">=1.44.0"

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  projectName: P300

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  environment:
    tableName: ${file(../api-infrastructure/serverless.yml):custom.generalTableName}
    ENVIRONMENT: ${opt:stage, self:provider.stage}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-P300-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-P300-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'

plugins:
  - serverless-offline
  - serverless-webpack

functions:
  getAllJourneys:
    handler: src/handler.getAllJourneys
    events:
      - http:
          path: /journeys
          method: get
          cors: true
          authorizer: aws_iam
  getAllJourneysPage:
    handler: src/handler.getAllJourneys
    events:
      - http:
          path: /journeys/page
          method: get
          cors: true
          authorizer: aws_iam
  searchJourneys:
    handler: src/handler.searchJourneys
    events:
      - http:
          path: /journeys/search/{query}
          method: get
          cors: true
          authorizer: aws_iam
  getJourneyById:
    handler: src/handler.getJourneyById
    events:
      - http:
          path: /journeys/{journeyId}/{createdAt}
          method: get
          cors: true
          authorizer: aws_iam
  createJourney:
    handler: src/handler.createJourney
    events:
      - http:
          path: /journeys
          method: post
          cors: true
          authorizer: aws_iam
  updateJourney:
    handler: src/handler.updateJourney
    events:
      - http:
          path: /journeys
          method: put
          cors: true
          authorizer: aws_iam
  deleteJourney:
    handler: src/handler.deleteJourney
    events:
      - http:
          path: /journeys/{journeyId}/{createdAt}
          method: delete
          cors: true
          authorizer: aws_iam
  addUserToJourney:
    handler: src/handler.addUserToJourney
    events:
      - http:
          path: /journeys/add-user
          method: put
          cors: true
          authorizer: aws_iam
  getDriverJourneys:
    handler: src/handler.getDriverJourneys
    events:
      - http:
          path: /journeys/driver
          method: get
          cors: true
          authorizer: aws_iam
  getPassengerJourneys:
    handler: src/handler.getPassengerJourneys
    events:
      - http:
          path: /journeys/passenger
          method: get
          cors: true
          authorizer: aws_iam
  startJourney:
    handler: src/handler.startJourney
    events:
      - http:
          path: /journeys/start/{journeyId}/{createdAt}
          method: put
          cors: true
          authorizer: aws_iam
  pauseJourney:
    handler: src/handler.pauseJourney
    events:
      - http:
          path: /journeys/pause/{journeyId}/{createdAt}
          method: put
          cors: true
          authorizer: aws_iam
  resumeJourney:
    handler: src/handler.resumeJourney
    events:
      - http:
          path: /journeys/resume/{journeyId}/{createdAt}
          method: put
          cors: true
          authorizer: aws_iam
  endJourney:
    handler: src/handler.endJourney
    events:
      - http:
          path: /journeys/end/{journeyId}/{createdAt}
          method: put
          cors: true
          authorizer: aws_iam
  cancelJourney:
    handler: src/handler.cancelJourney
    events:
      - http:
          path: /journeys/cancel/{journeyId}/{createdAt}
          method: put
          cors: true
          authorizer: aws_iam
  cancelPassengerAcceptedJourney:
    handler: src/handler.cancelPassengerAcceptedJourney
    events:
      - http:
          path: /journeys/passenger-cancel
          method: put
          cors: true
          authorizer: aws_iam
  subscribeDriverLocation:
    handler: src/handler.subscribeDriverLocation
    events:
      - http:
          path: /journeys/subscribe/driver-location
          method: put
          cors: true
          authorizer: aws_iam
  unsubscribeDriverLocation:
    handler: src/handler.unsubscribeDriverLocation
    events:
      - http:
          path: /journeys/unsubscribe/driver-location
          method: put
          cors: true
          authorizer: aws_iam
  driverMovement:
    handler: src/handler.driverMovement
    events:
      - http:
          path: /journeys/driver-movement
          method: put
          cors: true
          authorizer: aws_iam
  driverConfirmPassengerPickup:
    handler: src/handler.driverConfirmPassengerPickup
    events:
      - http:
          path: /journeys/confirm-pickup/driver
          method: put
          cors: true
          authorizer: aws_iam
  passengerConfirmPassengerPickup:
    handler: src/handler.passengerConfirmPassengerPickup
    events:
      - http:
          path: /journeys/confirm-pickup/passenger
          method: put
          cors: true
          authorizer: aws_iam
  driverCancelPassengerPickup:
    handler: src/handler.driverCancelPassengerPickup
    events:
      - http:
          path: /journeys/cancel-pickup/driver
          method: put
          cors: true
          authorizer: aws_iam
  passengerCancelPickup:
    handler: src/handler.passengerCancelPickup
    events:
      - http:
          path: /journeys/cancel-pickup/passenger
          method: put
          cors: true
          authorizer: aws_iam

resources:
    - ${file(../resources/cognito-policy.yml)}

