service:
  name: Project-300

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  stage: dev
  tags:
    project: project300
  #  environment:
  #    DYNAMODB_USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Users
  #
  #custom:
  #  dynamodb:
  #    stages:
  #      - dev
  #    start:
  #      port: 8000
  #      inMemory: true
  #      migrate: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:Scan'
        - 'execute-api:Invoke'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'

functions:
  connectHandler:
    handler: src/$connect/connect.connectHandler
    events:
      - websocket:
          route: $connect
  disconnectHandler:
    handler: src/$disconnect/disconnect.disconnectHandler
    events:
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: src/$default/default.defaultHandler
    events:
      - websocket:
          route: $default
  signupHandler:
    handler: src/functions/signup/signup.signupHandler
    events:
      - http:
          path: /signup
          method: post
          cors: true
  confirmationHandler:
    handler: src/functions/confirmation/confirmation.confirmationHandler
    events:
      - http:
          path: /account-confirmation
          method: post
          cors: true
  loginHandler:
    handler: src/functions/login/login.loginHandler
    events:
      - http:
          path: /login
          method: post
          cors: true
  driverApplicationCheckHandler:
    handler: src/functions/driver-application/driver-application.driverApplicationCheckHandler
    events:
      - http:
          path: /driver-application-check
          method: post
          cors: true
  driverApplicationHandler:
    handler: src/functions/driver-application/driver-application.driverApplicationHandler
    events:
      - http:
          path: /driver-application
          method: post
          cors: true
  approveApplicationHandler:
    handler: src/functions/admin/driver-applications/driver-applications.approveApplicationHandler
    events:
      - http:
          path: /approve-application
          method: post
          cors: true
  deleteApplicationHandler:
    handler: src/functions/admin/driver-applications/driver-applications.deleteApplicationHandler
    events:
      - http:
          path: /delete-application
          method: post
          cors: true
  driverApplicationsSubscriptionHandler:
    handler: src/functions/admin/driver-applications/driver-applications.driverApplicationsSubscriptionHandler
    events:
      - websocket:
          route: admin/driver-applications
  userProfileSubscriptionHandler:
    handler: src/functions/user/user.userProfileSubscriptionHandler
    events:
      - websocket:
          route: user/profile
  userUpdateFieldHandler:
    handler: src/functions/user/user.userUpdateFieldHandler
    events:
      - http:
          path: /user/update-field
          method: post
          cors: true
  updateAvatarHandler:
    handler: src/functions/user/user.userUpdateAvatarHandler
    events:
      - http:
          path: /user/update-avatar
          method: post
          cors: true
  s3KeyRequestHandler:
    handler: src/functions/_data/_data.s3KeyRequestHandler
    events:
      - http:
          path: /aws/s3-key
          method: post
          cors: true
  driverJourneysHandler:
    handler: src/functions/driver/journeys/journeys.driverJourneysHandler
    events:
      - http:
          path: /driver/journeys
          method: post
          cors: true
  passengerJourneysHandler:
    handler: src/functions/driver/journeys/journeys.passengerJourneysHandler
    events:
      - http:
          path: /passenger/journeys
          method: post
          cors: true
  journeyDetailsHandler:
    handler: src/functions/driver/journeys/journeys.journeyDetailsHandler
    events:
      - http:
          path: /journey/get-details
          method: post
          cors: true
  startJourneyHandler:
    handler: src/functions/driver/journeys/journeys.startJourneyHandler
    events:
      - http:
          path: /journey/start
          method: post
          cors: true
  endJourneyHandler:
    handler: src/functions/driver/journeys/journeys.endJourneyHandler
    events:
      - http:
          path: /journey/end
          method: post
          cors: true
  driverMovementHandler:
    handler: src/functions/driver/journeys/journeys.driverMovementHandler
    events:
      - http:
          path: /journey/driver-movement
          method: post
          cors: true
  driverLocationSubscriptionHandler:
    handler: src/functions/driver/journeys/journeys.driverLocationSubscriptionHandler
    events:
      - websocket:
          route: journey/driver-location
  cancelPassengerAcceptedJourneyHandler:
    handler: src/functions/driver/journeys/journeys.cancelPassengerAcceptedJourneyHandler
    events:
      - http:
          path: /passenger/journey/cancel
          method: post
          cors: true
  createJourneyHandler:
    handler: src/functions/driver/journeys/journeys.createJourneyHandler
    events:
      - http:
          path: /journey/create
          method: post
          cors: true
  allJourneysHandler:
    handler: src/functions/journey/journey.allJourneysHandler
    events:
      - http:
          path: /journeys/all/{userId}
          method: get
          cors: true
  userJoinedJourneyHandler:
    handler: src/functions/journey/journey.userJoinedJourneyHandler
    events:
      - http:
          path: /journeys/add-passenger
          method: patch
          cors: true

resources:
  Resources:
    ConnectionTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: 'connectionId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'connectionId'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        TableName: ConnectionIds
    CognitoTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: 'cognitoId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'cognitoId'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        TableName: CognitoData
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        TableName: P300-USERS
    DriverApplicationTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        TableName: P300-DRIVER-APPLICATIONS
    JourneyTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: 'journeyId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'journeyId'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        TableName: P300-JOURNEYS
    SubscriptionTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: 'subscriptionName'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'subscriptionName'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
        TableName: P300-SUBSCRIPTIONS
